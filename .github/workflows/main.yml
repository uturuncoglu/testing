name: comptest
 
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule: # this is required to prevent auto-removing cache entries after 7-days
    - cron: '0 0 * * MON'
    - cron: '0 0 * * FRI'

jobs:
  create_environment:
    runs-on: ubuntu-latest
    
    env:
      INSTALL_DIR: $HOME/install
      
    steps:
      # checkout base repository
      - name: Checkout Test Repository
        uses: actions/checkout@v3
        with:
          ref: main   
      
      # prepare core environment
      - name: Install Core Development Tools
        run: |
          sudo apt-get update
          sudo apt-get install unzip file gringo
          sudo apt-get install build-essential binutils-dev gfortran python-dev python-yaml python3-boto3 wget awscli ca-certificates
      
      # checkout spack to create build environment
      - name: Checkout Spack
        uses: actions/checkout@v3
        with:
          repository: uturuncoglu/spack
          path: spack
          ref: hotfix/esmf

      # create build environment
      - name: Concretize Spack Environment Using YAML Specification
        run: |
          . $GITHUB_WORKSPACE/spack/share/spack/setup-env.sh
          spack -e ${{ github.workspace }} concretize -f
          
      # restore build environment from cache
      - name: Restore Build Environment From Cache
        id: cache-spack
        uses: actions/cache@v2
        with:
          path: ~/.spack-ci
          key: ${{ hashFiles('**/spack.lock') }}
          restore-keys: |
            spack
            
      # create build environment
      - name: Install Spack Packages
        if: steps.cache-spack.outputs.cache-hit != 'true'
        run: |
          . $GITHUB_WORKSPACE/spack/share/spack/setup-env.sh 
          spack -e ${{ github.workspace }} install -j3
      
      # checkout data models
      - name: Checkout CDEPS
        uses: actions/checkout@v3
        with:
          repository: uturuncoglu/CDEPS
          path: cdeps
          ref: hotfix/std_build      
      
      # build and install data models
      - name: Build and Install CDEPS
        run: |
          export PATH=$HOME/.spack-ci/view/bin:$PATH
          export ESMFMKFILE=$HOME/.spack-ci/view/lib/esmf.mk
          cd ${{ github.workspace }}/cdeps
          mkdir build
          cd build
          cmake -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} \
            -DPIO_C_LIBRARY=$HOME/.spack-ci/view/lib \
            -DPIO_C_INCLUDE_DIR=$HOME/.spack-ci/view/include \
            -DPIO_Fortran_LIBRARY=$HOME/.spack-ci/view/lib \
            -DPIO_Fortran_INCLUDE_DIR=$HOME/.spack-ci/view/include \
            -DCMAKE_Fortran_FLAGS="-ffree-line-length-none -ffixed-line-length-none" \
            -DDISABLE_FoX=ON ../
          make
          make install

      # checkout component
      - name: Checkout NoahMP
        uses: actions/checkout@v3
        with:
          repository: uturuncoglu/noahmp
          path: noahmp
          ref: feature/nuopc_cap
          
      # build and install component
      # need to install with openmp support since fms build with it
      # TODO: update fms in spack.yaml as fms~openmp to build it without openmp support 
      - name: Build and Install NoahMP
        run: |
          export PATH=$HOME/.spack-ci/view/bin:$PATH
          export ESMFMKFILE=$HOME/.spack-ci/view/lib/esmf.mk
          export NetCDF_ROOT=`nc-config --prefix`
          export FC=gfortran
          cd ${{ github.workspace }}/noahmp
          mkdir build
          cd build
          cmake -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} -DOPENMP=ON ../
          make
          make install

      # checkout generic driver
      - name: Checkout Generic NUOPC Driver
        uses: actions/checkout@v3
        with:
          repository: uturuncoglu/GenericNUOPCDriver
          path: driver
          ref: main

      # build and install driver
      - name: Build and Install Generic NUOPC Driver
        run: |
          export PATH=$HOME/.spack-ci/view/bin:$PATH
          export ESMFMKFILE=$HOME/.spack-ci/view/lib/esmf.mk
          export NetCDF_ROOT=`nc-config --prefix`
          export ATM_LIB_DIR=${{ env.INSTALL_DIR }}/lib
          export ATM_INC_DIR=${{ env.INSTALL_DIR }}/include
          export LND_LIB_DIR=${{ env.INSTALL_DIR }}/lib
          export LND_INC_DIR=${{ env.INSTALL_DIR }}/mod
          export FC=mpif90
          cd ${{ github.workspace }}/driver
          cmake -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} \
            -DPIO_PREFIX=$HOME/.spack-ci/view .
          make
          make install

      # restore input files from cache
      - name: Restore Input Files From Cache
        id: cache-input
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/run/INPUT
          key: input-${{ hashFiles('**/file_checksum.lock') }}

      # download input files for components
      - name: Download Input Files
        if: steps.cache-input.outputs.cache-hit != 'true'
        run: |
          export PATH=$HOME/.spack-ci/view/bin:$PATH
          mkdir -p ${{ github.workspace }}/run/INPUT
          cd ${{ github.workspace }}/run/INPUT
          python3 ${{ github.workspace }}/driver/scripts/get_input.py --ifile ${{ github.workspace }}/driver/nuopc_drv.yaml

      # checkout configuration files and additional input files for noahmp
      - name: Checkout Generic NUOPC Driver
        uses: actions/checkout@v3
        with:
          repository: uturuncoglu/noahmp_data
          path: noahmp_data
          ref: main
          
      # get configuration files
      # TODO: configuration files needs to be generated by scripting
      - name: Move Configuration Files to Input Directory
        run: |
          export PATH=$HOME/.spack-ci/view/bin:$PATH 
          cd ${{ github.workspace }}/run/INPUT
          mv ${{ github.workspace }}/noahmp_data/INPUT_ex/* .
          ln -s grid_spec.nc C96_mosaic.nc
          cd ${{ github.workspace }}/run
          mv ${{ github.workspace }}/noahmp_data/datm.streams.xml .
          mv ${{ github.workspace }}/noahmp_data/datm_in .
          mv ${{ github.workspace }}/noahmp_data/fd.yaml .
          mv ${{ github.workspace }}/noahmp_data/nuopc.configure .
          mv ${{ github.workspace }}/noahmp_data/input.nml .
          
      # run application
      - name: Run Application
        run: |
          export PATH=$HOME/.spack-ci/view/bin:$PATH
          cd ${{ github.workspace }}/run
          mpirun --oversubscribe -np 6 --allow-run-as-root ${{ env.INSTALL_DIR }}/bin/driver
          cat PET0.ESMF_LogFile
